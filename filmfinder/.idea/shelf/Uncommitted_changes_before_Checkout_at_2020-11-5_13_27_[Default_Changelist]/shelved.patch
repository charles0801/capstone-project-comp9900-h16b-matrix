Index: src/main/java/com/matrix/filmfinder/controller/CommentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.matrix.filmfinder.controller;\r\n\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.matrix.filmfinder.dao.CommentLikeRepository;\r\nimport com.matrix.filmfinder.dao.CommentRepository;\r\nimport com.matrix.filmfinder.dao.MovieRepository;\r\nimport com.matrix.filmfinder.dao.UserRepository;\r\nimport com.matrix.filmfinder.message.CommentMessageInterface;\r\nimport com.matrix.filmfinder.model.Comment;\r\nimport com.matrix.filmfinder.model.CommentLike;\r\nimport com.matrix.filmfinder.model.Movie;\r\nimport com.matrix.filmfinder.model.User;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.json.JsonParseException;\r\nimport org.springframework.dao.DataAccessResourceFailureException;\r\nimport org.springframework.dao.DataIntegrityViolationException;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport javax.persistence.EntityNotFoundException;\r\nimport javax.persistence.NoResultException;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(path = \"/comment\")\r\npublic class CommentController {\r\n    private CommentRepository commentRepository;\r\n    private MovieRepository movieRepository;\r\n    private UserRepository userRepository;\r\n    private CommentLikeRepository commentLikeRepository;\r\n    @Autowired\r\n    public CommentController(CommentRepository commentRepository, MovieRepository movieRepository, UserRepository userRepository, CommentLikeRepository commentLikeRepository) {\r\n       this.commentRepository = commentRepository;\r\n       this.movieRepository = movieRepository;\r\n       this.userRepository = userRepository;\r\n       this.commentLikeRepository = commentLikeRepository;\r\n    }\r\n\r\n    @GetMapping(path = \"/getMine\")\r\n    public ResponseEntity<Object> findCommentsByUserAndMovie(@RequestParam Movie movie, @RequestParam User user) {\r\n        try {\r\n            List<Comment> comments = commentRepository.findCommentsByUserAndMovie(user, movie);\r\n            return new ResponseEntity<>(\r\n                    comments,\r\n                    HttpStatus.OK\r\n            );\r\n        } catch (EntityNotFoundException ee) {\r\n            return new ResponseEntity<>(\r\n                    \"shouldn't happens\",\r\n                    HttpStatus.NOT_FOUND\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    @GetMapping(path = \"/getAll\")\r\n    public ResponseEntity<Object> findAllCommentsByMovie(@RequestParam Movie movie, @RequestParam User user) {\r\n        try {\r\n            List<CommentMessageInterface> comments = commentRepository.findCommentsByMovieWithLikedUser(movie, user);\r\n            return new ResponseEntity<>(\r\n                    comments,\r\n                    HttpStatus.OK\r\n            );\r\n        } catch (EntityNotFoundException ee) {\r\n            return new ResponseEntity<>(\r\n                    \"Entities not found when get comments by movie\",\r\n                    HttpStatus.NOT_FOUND\r\n            );\r\n        }\r\n    }\r\n    // add comment\r\n    @PostMapping(path = \"/add\")\r\n    public ResponseEntity<Object> addComment(@RequestBody JsonNode jsonNode) {\r\n        Comment comment = new Comment();\r\n        Movie movie = new Movie();\r\n        Integer uid;\r\n        Integer movie_id;\r\n        User user = new User();\r\n        String content = \"\";\r\n        try {\r\n            uid = jsonNode.get(\"uid\").asInt();\r\n            user = userRepository.getUserById(uid);\r\n            movie_id = jsonNode.get(\"movie_id\").asInt();\r\n            content = jsonNode.get(\"content\").asText();\r\n        } catch (EntityNotFoundException ee) {\r\n            return new ResponseEntity<>(\r\n                    \"User not found you fucker!!!\",\r\n                    HttpStatus.NOT_FOUND\r\n            );\r\n        } catch (JsonParseException e) {\r\n            return new ResponseEntity<>(\r\n                    \"format for comment json is not correct\",\r\n                    HttpStatus.BAD_REQUEST\r\n            );\r\n        }\r\n        try {\r\n           movie = movieRepository.getOne(movie_id);\r\n        } catch (DataAccessResourceFailureException ed) {\r\n            return new ResponseEntity<>(\r\n                    \"That's shouldn't happens, addComment cannot find movie\",\r\n                    HttpStatus.INTERNAL_SERVER_ERROR\r\n            );\r\n        } catch (EntityNotFoundException ee) {\r\n            return new ResponseEntity<>(\r\n                    \"MOVIE Not found when add comment\",\r\n                    HttpStatus.NOT_FOUND\r\n            );\r\n        }\r\n        comment.setUser(user);\r\n        comment.setMovie(movie);\r\n        comment.setNLikes(0L);\r\n        comment.setContent(content);\r\n        comment.setSubmitTime(new Date());\r\n        try {\r\n            commentRepository.save(comment);\r\n            return new ResponseEntity<>(\r\n                    comment,\r\n                    HttpStatus.OK\r\n            );\r\n        } catch (DataIntegrityViolationException e) {\r\n            return new ResponseEntity<>(\r\n                    \"comment saving error, maybe the user doesn't exist\",\r\n                    HttpStatus.BAD_REQUEST\r\n            );\r\n        }\r\n    }\r\n\r\n    //    update n_likes\r\n    @PutMapping(value = \"/like\")\r\n    public ResponseEntity<Object> like(@RequestParam User user, @RequestParam Comment comment) {\r\n//        comment = commentRepository.getOne(comment.getId());\r\n        CommentLike commentLike = commentLikeRepository.getCommentLikeByUserAndComment(user, comment);\r\n        if (commentLike == null) {\r\n            commentLike = new CommentLike(user, comment);\r\n            commentLikeRepository.saveAndFlush(commentLike);\r\n            comment.setNLikes(commentLikeRepository.countCommentLikesByComment(comment));\r\n            commentRepository.save(comment);\r\n        }\r\n        return new ResponseEntity<>(\r\n                comment,\r\n                HttpStatus.OK\r\n        );\r\n\r\n    }\r\n\r\n    @PutMapping(value = \"/unlike\")\r\n    public ResponseEntity<Object> unlike(@RequestParam User user, @RequestParam Comment comment) {\r\n        CommentLike commentLike = commentLikeRepository.getCommentLikeByUserAndComment(user, comment);\r\n        if(commentLike != null) {\r\n            commentLikeRepository.delete(commentLike);\r\n            comment.setNLikes(commentLikeRepository.countCommentLikesByComment(comment));\r\n            commentRepository.save(comment);\r\n            return new ResponseEntity<>(\r\n                    comment,\r\n                    HttpStatus.OK\r\n            );\r\n        } else {\r\n            return new ResponseEntity<>(\r\n                    \"Unlike Unsucessfully coz no like detail found\",\r\n                    HttpStatus.NOT_FOUND\r\n            );\r\n        }\r\n\r\n    }\r\n//    // Update comment\r\n//    @PutMapping(value = \"udComment/{id}\")\r\n//    public Comment updateComment(@PathVariable Integer id, @RequestParam(\"content\") String content) {\r\n//        Comment record = commentRepository.findById(id).get();\r\n//        record.setContent((content));\r\n//        return commentRepository.save(record);\r\n//    }\r\n\r\n    // Delete data\r\n    @DeleteMapping(value = \"/delete\")\r\n    public ResponseEntity<Object> deleteComment(@RequestParam Integer id) {\r\n        try {\r\n            commentRepository.deleteById(id);\r\n        } catch(NoResultException e) {\r\n            return new ResponseEntity<>(\r\n                    \"Comment doesn't exist\" + id.toString(),\r\n                    HttpStatus.BAD_REQUEST\r\n            );\r\n        } catch (IllegalArgumentException ed) {\r\n            return new ResponseEntity<>(\r\n                    \"You cannot delete comment like this, check your param you fucker!!!\",\r\n                    HttpStatus.BAD_REQUEST\r\n            );\r\n        }\r\n        return new ResponseEntity<>(\r\n                \"Comment \" + id.toString() + \" deleted\",\r\n                HttpStatus.OK\r\n        );\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/matrix/filmfinder/controller/CommentController.java	(revision 2f78facc47c2c77e3ac6080ff977526b855c363f)
+++ src/main/java/com/matrix/filmfinder/controller/CommentController.java	(date 1604552702797)
@@ -149,7 +149,14 @@
     public ResponseEntity<Object> unlike(@RequestParam User user, @RequestParam Comment comment) {
         CommentLike commentLike = commentLikeRepository.getCommentLikeByUserAndComment(user, comment);
         if(commentLike != null) {
-            commentLikeRepository.delete(commentLike);
+            try {
+                commentLikeRepository.delete(commentLike);
+            } catch (RuntimeException e) {
+                return new ResponseEntity<>(
+                        e.getMessage(),
+                        HttpStatus.INTERNAL_SERVER_ERROR
+                );
+            }
             comment.setNLikes(commentLikeRepository.countCommentLikesByComment(comment));
             commentRepository.save(comment);
             return new ResponseEntity<>(
